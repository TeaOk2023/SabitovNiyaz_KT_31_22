// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SabitovApp.Data;

#nullable disable

namespace SabitovApp.Migrations
{
    [DbContext(typeof(StudentDbContex))]
<<<<<<<< HEAD:SabitovApp/Migrations/20250518105900_mgr1.Designer.cs
    [Migration("20250518105900_mgr1")]
========
    [Migration("20250521165152_mgr1")]
>>>>>>>> f965587 (compleate lab4):SabitovApp/Migrations/20250521165152_mgr1.Designer.cs
    partial class mgr1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<int>("DisciplinesDisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersTeacherId")
                        .HasColumnType("int");

                    b.HasKey("DisciplinesDisciplineId", "TeachersTeacherId");

                    b.HasIndex("TeachersTeacherId");

                    b.ToTable("TeacherDisciplines", null, t =>
                        {
                            t.HasComment("Связь между преподавателями и дисциплинами");
                        });
                });

            modelBuilder.Entity("SabitovApp.Models.AcademicDegree", b =>
                {
                    b.Property<int>("AcademicDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AcademicDegreeId")
                        .HasComment("Идентификатор ученой степени");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicDegreeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .HasComment("Название ученой степени");

                    b.HasKey("AcademicDegreeId");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("SabitovApp.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId")
                        .HasComment("Идентификатор кафедры");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int?>("HeadOfDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("HeadOfDepartmentId")
                        .HasComment("Идентификатор заведующего кафедрой (ссылка на TeacherId)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasComment("Название кафедры");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HeadOfDepartmentId")
                        .IsUnique()
                        .HasFilter("[HeadOfDepartmentId] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SabitovApp.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DisciplineId")
                        .HasComment("Идентификатор дисциплины");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasComment("Название дисциплины");

                    b.HasKey("DisciplineId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("SabitovApp.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PositionId")
                        .HasComment("Идентификатор должности");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .HasComment("Название должности");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SabitovApp.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeacherId")
                        .HasComment("Идентификатор преподавателя");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int?>("AcademicDegreeId")
                        .HasColumnType("int")
                        .HasColumnName("AcademicDegreeId")
                        .HasComment("Ученая степень");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId")
                        .HasComment("Идентификатор кафедры");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName")
                        .HasComment("Имя преподавателя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName")
                        .HasComment("Фамилия преподавателя");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionId")
                        .HasComment("Должность");

                    b.HasKey("TeacherId");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SabitovApp.Models.Workload", b =>
                {
                    b.Property<int>("WorkloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkloadId")
                        .HasComment("Идентификатор нагрузки");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkloadId"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int")
                        .HasColumnName("DisciplineId")
                        .HasComment("Идентификатор дисциплины (ссылка на DisciplineId)");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("Hours")
                        .HasComment("Количество часов нагрузки");

                    b.HasKey("WorkloadId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Workloads");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("SabitovApp.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabitovApp.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SabitovApp.Models.Department", b =>
                {
                    b.HasOne("SabitovApp.Models.Teacher", "HeadOfDepartment")
                        .WithOne()
                        .HasForeignKey("SabitovApp.Models.Department", "HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("SabitovApp.Models.Teacher", b =>
                {
                    b.HasOne("SabitovApp.Models.AcademicDegree", "AcademicDegree")
                        .WithMany("Teachers")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SabitovApp.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabitovApp.Models.Position", "Position")
                        .WithMany("Teachers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicDegree");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SabitovApp.Models.Workload", b =>
                {
                    b.HasOne("SabitovApp.Models.Discipline", "Discipline")
                        .WithMany("Workloads")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("SabitovApp.Models.AcademicDegree", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SabitovApp.Models.Discipline", b =>
                {
                    b.Navigation("Workloads");
                });

            modelBuilder.Entity("SabitovApp.Models.Position", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
